import java.time.LocalDate

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.15'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.0.1'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.harawata:appdirs:1.2.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.apache.commons:commons-collections4:4.5.0-M1'
    implementation 'commons-io:commons-io:2.16.1'
    implementation 'org.apache.maven.plugins:maven-compiler-plugin:3.13.0'
    implementation 'org.tinylog:tinylog-api:2.7.0'
    implementation 'org.tinylog:tinylog-impl:2.7.0'
    implementation 'io.github.mkpaz:atlantafx-base:2.0.1'
    implementation 'org.kordamp.ikonli:ikonli-core:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-materialdesign2-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1'
    implementation 'net.java.dev.jna:jna:5.8.0'
    implementation 'net.java.dev.jna:jna-platform:5.8.0'
    implementation 'org.fxmisc.richtext:richtextfx:0.11.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.13.0'
}

javafx {
    version = "23.0.2"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.fxml', 'javafx.web']
}

version = '1.0.0'
description = 'JavaFX Modular Gradle Demo'
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

application {
    mainClass = 'ca.weblite.jdeployTemplateJavafxModularGradle.Main'
    mainModule = 'ca.weblite.jdeployTemplateJavafxModularGradle'
}

run {
    jvmArgs = []
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

jlink {
    addOptions('--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages')
    addExtraDependencies("javafx")
    launcher {
        name = 'MyApp'
        jvmArgs = []
    }
    jpackage { //not to be called without Params
        installerOptions = [
                '--description', project.description,
                '--copyright', 'Copyright 2023-' + getCurrentYear() + ' www.myapp.com'
        ]
        installerType = project.findProperty('installerType')
        // we will pass this from the command line (example: -PinstallerType=exe)
        if (installerType == 'exe') {
            imageOptions += ['--icon', 'src/main/resources/ca/weblite/jdeployTemplateJavafxModularGradle/icon.ico']
            installerOptions += [
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut'
            ]
        }
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'src/main/resources/ca/weblite/jdeployTemplateJavafxModularGradle/icon.ico']
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/resources/ca/weblite/jdeployTemplateJavafxModularGradle/icon.ico']
        }
        // apt-get install binutils
        // apt-get install fakeroot
        if (installerType == 'deb' || installerType == 'rpm') {
            imageOptions += ['--icon', 'src/main/resources/ca/weblite/jdeployTemplateJavafxModularGradle/icon.png']
            installerOptions += [
                    '--linux-menu-group', 'Office',
                    '--linux-shortcut',
                    '--resource-dir', "build/jpackage/JavaFX Modular Gradle Demo/lib",
                    '--description', project.description,
                    '--app-version', version
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'contact@myapp.fr'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-menu-group', 'Office',
                    '--linux-shortcut',
                    '--resource-dir', "build/jpackage/JavaFX Modular Gradle Demo/lib",
                    '--description', project.description,
                    '--app-version', version,
                    '--linux-deb-maintainer', 'contact@myapp.fr'
            ]
        }
        if (installerType == 'dmg') {//https://codetinkering.com/how-to-use-jpackage-tool-cli-for-macos-apps/
            imageOptions += ['--icon', 'src/main/resources/ca/weblite/jdeployTemplateJavafxModularGradle/icon.icns']
            installerOptions += [
                    '--name', 'JavaFX Modular Gradle Demo',
                    '--description', project.description,
                    '--app-version', version,
                    '--verbose'
            ]
        }
    }
}

tasks.register('buildExeForWindows', GradleBuild) {
    group = "release"
    startParameter.projectProperties = ['installerType':'exe']
    tasks = ['jpackage']
}

tasks.register('buildMsiForWindows', GradleBuild) {
    group = "release"
    startParameter.projectProperties = ['installerType':'msi']
    tasks = ['jpackage']
}

tasks.register('buildDebForLinux', GradleBuild) {
    group = "release"
    startParameter.projectProperties = ['installerType':'deb']
    tasks = ['jpackage']
}

tasks.register('buildRpmForLinux', GradleBuild) {
    group = "release"
    startParameter.projectProperties = ['installerType':'rpm']
    tasks = ['jpackage']
}

tasks.register('buildDmgForMacOS', GradleBuild) {
    group = "release"
    startParameter.projectProperties = ['installerType':'dmg']
    tasks = ['jpackage']
}

tasks.register('buildExecutableJar', Jar) {
    group = "release"
    description = "Builds a jar with external dependencies."

    archiveClassifier = ''

    manifest {
        attributes(
                'Main-Class': application.mainClass,
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/${it.name}" }.join(' ')
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from sourceSets.main.output

    doLast {
        copy {
            from configurations.runtimeClasspath
            into "$buildDir/libs/libs"
        }
    }
}



static def getCurrentYear() {
    return LocalDate.now().format("yyyy")
}

